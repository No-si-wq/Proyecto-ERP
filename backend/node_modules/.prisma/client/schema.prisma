generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  username  String
  role      String   @default("USER")
  createdAt DateTime @default(now())
}

model Client {
  id        Int       @id @default(autoincrement())
  name      String
  email     String?   @unique
  phone     String?
  address   String?
  createdAt DateTime  @default(now())
  rtn       String
  invoices  Invoice[]
}

model Supplier {
  id        Int        @id @default(autoincrement())
  name      String
  email     String?    @unique
  phone     String?
  address   String?
  createdAt DateTime   @default(now())
  rtn       String
  purchases Purchase[]
}

model Product {
  id            Int            @id @default(autoincrement())
  name          String
  sku           String         @unique
  price         Float
  quantity      Int            @default(0)
  createdAt     DateTime       @default(now())
  categoryId    Int?
  taxId         Int
  invoiceItems  InvoiceItem[]
  category      Category?      @relation(fields: [categoryId], references: [id])
  tax           Tax            @relation(fields: [taxId], references: [id])
  purchaseItems PurchaseItem[]
}

model Invoice {
  id              Int           @id @default(autoincrement())
  total           Float
  createdAt       DateTime      @default(now())
  clientId        Int
  cambio          Float?
  formasPago      Json?
  importeRecibido Float?
  folio           String        @default("")
  estado          String?       @default("EMITIDA") @db.VarChar(20)
  client          Client        @relation(fields: [clientId], references: [id])
  items           InvoiceItem[]
}

model InvoiceItem {
  id        Int     @id @default(autoincrement())
  invoiceId Int
  productId Int
  quantity  Int
  price     Float
  subtotal  Float
  invoice   Invoice @relation(fields: [invoiceId], references: [id])
  product   Product @relation(fields: [productId], references: [id])

  @@index([invoiceId])
  @@index([productId])
}

model Purchase {
  id         Int            @id @default(autoincrement())
  total      Float
  createdAt  DateTime       @default(now())
  supplierId Int
  folio      String?        @unique
  estado     String?        @default("EMITIDA") @db.VarChar(20)
  supplier   Supplier       @relation(fields: [supplierId], references: [id])
  items      PurchaseItem[]
}

model PurchaseItem {
  id         Int      @id @default(autoincrement())
  purchaseId Int
  productId  Int
  quantity   Int
  price      Float
  subtotal   Float
  product    Product  @relation(fields: [productId], references: [id])
  purchase   Purchase @relation(fields: [purchaseId], references: [id])

  @@index([purchaseId])
  @@index([productId])
}

model Category {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  createdAt DateTime  @default(now())
  products  Product[]
}

model payment_methods {
  id          Int    @id @default(autoincrement())
  clave       String @db.VarChar(10)
  descripcion String @db.VarChar(50)
  tipo        String @db.VarChar(30)
  moneda      String @db.VarChar(30)
}

model Currency {
  id          Int      @id @default(autoincrement())
  clave       String   @db.VarChar(10)
  descripcion String   @db.VarChar(50)
  abreviatura String   @db.VarChar(10)
  tipoCambio  Float
  fecha       DateTime @updatedAt
}

model Tax {
  id          Int       @id @default(autoincrement())
  clave       String    @unique
  descripcion String
  percent     Float
  products    Product[]
}

model prisma_migrations {
  id                  Int       @id @default(dbgenerated("nextval('_prisma_migrations_id_seq'::regclass)"))
  migration_name      String
  checksum            String
  finished_at         DateTime?
  applied_steps_count Int       @default(0)
  rolled_back_at      DateTime?
  applied_at          DateTime  @default(now())

  @@map("_prisma_migrations")
}
